/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package easypolly;

import com.sun.tools.javac.util.ArrayUtils;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Image;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.io.File;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.ImageIcon;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author DELL
 */
public class Vista extends javax.swing.JFrame {

    /**
     * Creates new form Vista
     */
    private String path="";
    File f;
    public Vista() {
        initComponents();
        //we set the main propeties
        this.setLocationRelativeTo(null );
        this.setResizable(false);
        this.setTitle("EasyPolly");
    }
    
    private BufferedImage originalImage = null;
    private Color imageColor = Color.BLACK;
    
    private boolean listenToPositionChanges = true;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroup_backColor = new javax.swing.ButtonGroup();
        panel_imageProperties = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        slider_imageBrightness = new javax.swing.JSlider();
        jLabel4 = new javax.swing.JLabel();
        slider_imageScale = new javax.swing.JSlider();
        jLabel5 = new javax.swing.JLabel();
        chk_centerH = new javax.swing.JCheckBox();
        chk_centerV = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        chk_invertBinarization = new javax.swing.JCheckBox();
        radio_darkBack = new javax.swing.JRadioButton();
        radio_lightBack = new javax.swing.JRadioButton();
        panel_imageColor = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        spin_imageX = new javax.swing.JSpinner();
        spin_imageY = new javax.swing.JSpinner();
        spin_imageRight = new javax.swing.JSpinner();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        spin_imageBottom = new javax.swing.JSpinner();
        jPanel2 = new javax.swing.JPanel();
        rSButtonMetro1 = new rsbuttom.RSButtonMetro();
        rSButtonMetro2 = new rsbuttom.RSButtonMetro();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        rSButtonMetro3 = new rsbuttom.RSButtonMetro();
        canvas_pic = new easypolly.ImageCanvas();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(49, 51, 53));
        setSize(new java.awt.Dimension(800, 600));

        panel_imageProperties.setBackground(new java.awt.Color(210, 210, 210));

        jLabel3.setText("Binarization threshold");

        slider_imageBrightness.setBackground(new java.awt.Color(210, 210, 210));
        slider_imageBrightness.setPaintLabels(true);
        slider_imageBrightness.setPaintTicks(true);
        slider_imageBrightness.setToolTipText("50%");
        slider_imageBrightness.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slider_imageBrightnessStateChanged(evt);
            }
        });

        jLabel4.setText("Image scale");

        slider_imageScale.setBackground(new java.awt.Color(210, 210, 210));
        slider_imageScale.setMaximum(150);
        slider_imageScale.setMinimum(25);
        slider_imageScale.setPaintLabels(true);
        slider_imageScale.setPaintTicks(true);
        slider_imageScale.setToolTipText("100%");
        slider_imageScale.setValue(100);
        slider_imageScale.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slider_imageScaleStateChanged(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Yu Gothic", 0, 16)); // NOI18N
        jLabel5.setText("Image properties");

        chk_centerH.setBackground(new java.awt.Color(210, 210, 210));
        chk_centerH.setSelected(true);
        chk_centerH.setText("Center horizontally");
        chk_centerH.setEnabled(false);
        chk_centerH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chk_centerHActionPerformed(evt);
            }
        });

        chk_centerV.setBackground(new java.awt.Color(210, 210, 210));
        chk_centerV.setSelected(true);
        chk_centerV.setText("Center vertically");
        chk_centerV.setEnabled(false);
        chk_centerV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chk_centerVActionPerformed(evt);
            }
        });

        jLabel6.setText("Image position");

        chk_invertBinarization.setBackground(new java.awt.Color(210, 210, 210));
        chk_invertBinarization.setText("Invert");
        chk_invertBinarization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chk_invertBinarizationActionPerformed(evt);
            }
        });

        radio_darkBack.setBackground(new java.awt.Color(210, 210, 210));
        btnGroup_backColor.add(radio_darkBack);
        radio_darkBack.setSelected(true);
        radio_darkBack.setText("Dark background");
        radio_darkBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_darkBackActionPerformed(evt);
            }
        });

        radio_lightBack.setBackground(new java.awt.Color(210, 210, 210));
        btnGroup_backColor.add(radio_lightBack);
        radio_lightBack.setText("Light background");
        radio_lightBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_lightBackActionPerformed(evt);
            }
        });

        panel_imageColor.setBackground(new java.awt.Color(0, 0, 0));
        panel_imageColor.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(250, 250, 250)));
        panel_imageColor.setPreferredSize(new java.awt.Dimension(25, 25));
        panel_imageColor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panel_imageColorMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panel_imageColorLayout = new javax.swing.GroupLayout(panel_imageColor);
        panel_imageColor.setLayout(panel_imageColorLayout);
        panel_imageColorLayout.setHorizontalGroup(
            panel_imageColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 23, Short.MAX_VALUE)
        );
        panel_imageColorLayout.setVerticalGroup(
            panel_imageColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 23, Short.MAX_VALUE)
        );

        jLabel8.setText("Image color");

        jLabel7.setText("x:");

        jLabel9.setText("y:");

        spin_imageX.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spin_imageXStateChanged(evt);
            }
        });

        spin_imageY.setPreferredSize(new java.awt.Dimension(20, 20));
        spin_imageY.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spin_imageYStateChanged(evt);
            }
        });

        spin_imageRight.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spin_imageRightStateChanged(evt);
            }
        });

        jLabel10.setText("right:");

        jLabel11.setText("bottom:");

        spin_imageBottom.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spin_imageBottomStateChanged(evt);
            }
        });

        javax.swing.GroupLayout panel_imagePropertiesLayout = new javax.swing.GroupLayout(panel_imageProperties);
        panel_imageProperties.setLayout(panel_imagePropertiesLayout);
        panel_imagePropertiesLayout.setHorizontalGroup(
            panel_imagePropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_imagePropertiesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_imagePropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chk_centerV)
                    .addComponent(chk_centerH)
                    .addComponent(jLabel4)
                    .addComponent(slider_imageScale, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(radio_darkBack)
                    .addComponent(radio_lightBack)
                    .addGroup(panel_imagePropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(panel_imagePropertiesLayout.createSequentialGroup()
                            .addComponent(panel_imageColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel8)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(chk_invertBinarization))
                        .addGroup(panel_imagePropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(slider_imageBrightness, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)))
                    .addGroup(panel_imagePropertiesLayout.createSequentialGroup()
                        .addGroup(panel_imagePropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(panel_imagePropertiesLayout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spin_imageX))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panel_imagePropertiesLayout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spin_imageY, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel_imagePropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panel_imagePropertiesLayout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(spin_imageRight, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panel_imagePropertiesLayout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spin_imageBottom, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel_imagePropertiesLayout.setVerticalGroup(
            panel_imagePropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_imagePropertiesLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(slider_imageBrightness, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_imagePropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panel_imagePropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(chk_invertBinarization)
                        .addComponent(jLabel8))
                    .addComponent(panel_imageColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(slider_imageScale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_imagePropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_imagePropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel10)
                        .addComponent(spin_imageRight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel_imagePropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(spin_imageX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_imagePropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_imagePropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel11)
                        .addComponent(spin_imageBottom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel_imagePropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(spin_imageY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chk_centerH)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chk_centerV)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(radio_darkBack)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radio_lightBack)
                .addGap(29, 29, 29))
        );

        jPanel2.setBackground(new java.awt.Color(49, 51, 53));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        rSButtonMetro1.setText("Load picture");
        rSButtonMetro1.setColorHover(new java.awt.Color(255, 0, 0));
        rSButtonMetro1.setColorNormal(new java.awt.Color(38, 86, 186));
        rSButtonMetro1.setFocusPainted(false);
        rSButtonMetro1.setFont(new java.awt.Font("Microsoft New Tai Lue", 0, 14)); // NOI18N
        rSButtonMetro1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSButtonMetro1ActionPerformed(evt);
            }
        });

        rSButtonMetro2.setText("Get Cordinate");
        rSButtonMetro2.setColorHover(new java.awt.Color(255, 0, 0));
        rSButtonMetro2.setColorNormal(new java.awt.Color(38, 86, 186));
        rSButtonMetro2.setFocusPainted(false);
        rSButtonMetro2.setFocusable(false);
        rSButtonMetro2.setFont(new java.awt.Font("Microsoft New Tai Lue", 0, 14)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Microsoft New Tai Lue", 0, 10)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("X-620");

        jLabel2.setFont(new java.awt.Font("Microsoft New Tai Lue", 0, 10)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Y-480");

        rSButtonMetro3.setText("Help");
        rSButtonMetro3.setColorHover(new java.awt.Color(255, 0, 0));
        rSButtonMetro3.setColorNormal(new java.awt.Color(38, 86, 186));
        rSButtonMetro3.setFocusPainted(false);
        rSButtonMetro3.setFocusable(false);
        rSButtonMetro3.setFont(new java.awt.Font("Microsoft New Tai Lue", 0, 14)); // NOI18N
        rSButtonMetro3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSButtonMetro3ActionPerformed(evt);
            }
        });

        canvas_pic.setBackground(new java.awt.Color(70, 70, 70));
        canvas_pic.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        canvas_pic.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                canvas_picMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                canvas_picMouseMoved(evt);
            }
        });
        canvas_pic.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                canvas_picMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                canvas_picMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout canvas_picLayout = new javax.swing.GroupLayout(canvas_pic);
        canvas_pic.setLayout(canvas_picLayout);
        canvas_picLayout.setHorizontalGroup(
            canvas_picLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        canvas_picLayout.setVerticalGroup(
            canvas_picLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 478, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(rSButtonMetro1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(rSButtonMetro2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(rSButtonMetro3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(630, 630, 630)
                                .addComponent(jLabel2))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(canvas_pic, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(28, 28, 28))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rSButtonMetro1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rSButtonMetro2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rSButtonMetro3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(canvas_pic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(2, 2, 2))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 682, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(panel_imageProperties, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_imageProperties, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rSButtonMetro1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSButtonMetro1ActionPerformed
        // TODO add your handling code here:
        //put a picture in the panel
        JFileChooser fc = new JFileChooser();

        FileNameExtensionFilter filter = new FileNameExtensionFilter("JPG & JPEG & PNG", "jpg", "jpeg", "png");
        fc.setFileFilter(filter);

        int seleccion = fc.showOpenDialog(null);
        fc.setDialogTitle("Buscar imagen...");

        if (seleccion == JFileChooser.APPROVE_OPTION) {
            f = fc.getSelectedFile();
            ImageIcon i = null;
            try {
                i = new ImageIcon(f.toURI().toURL());
                originalImage = ImageUtils.getBufferedImage(i.getImage());
                
                int newScale = 100;
                
                //If the image does not fit in screen, we scale it
                if(originalImage.getWidth() > this.canvas_pic.getWidth()) {
                    newScale = Math.round(this.canvas_pic.getWidth() / ((float)originalImage.getWidth()) * 100);
                } 
                else if(originalImage.getHeight() > this.canvas_pic.getHeight()) {
                    newScale = Math.round(this.canvas_pic.getHeight() / ((float)originalImage.getHeight()) * 100);
                }
                
                this.slider_imageScale.setValue(newScale);
                this.canvas_pic.setImageScale(newScale);
                
                this.processAndSetImage(originalImage);
                this.canvas_pic.centerImage();
                this.displayImageLocation();
            } 
            catch (MalformedURLException ex) {
                JOptionPane.showMessageDialog(null, "Error en el formato o al encontrar la imagen.");
                //Logger.getLogger(CargarImagenes.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
        }
    }//GEN-LAST:event_rSButtonMetro1ActionPerformed

    private void rSButtonMetro3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSButtonMetro3ActionPerformed
        // TODO add your handling code here:
        //here show the instruction of software
        JOptionPane.showMessageDialog(null,"Not available");
    }//GEN-LAST:event_rSButtonMetro3ActionPerformed

    private Point mouseLocationInImage = null;
    
    private void canvas_picMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvas_picMouseDragged
        if(mouseLocationInImage != null){
            int newXLocation = evt.getX() + mouseLocationInImage.x;
            int newYLocation = evt.getY() + mouseLocationInImage.y;
            
            this.setImageXLocation(newXLocation);
            this.setImageYLocation(newYLocation);
            
            Rectangle imageBounds = canvas_pic.getImageBounds();
            
            if(imageBounds != null && canvas_pic.getImageBounds().contains(evt.getPoint())){
            mouseLocationInImage = new Point(this.canvas_pic.getImageX() - evt.getX(), 
                    this.canvas_pic.getImageY() - evt.getY());
            }
        }
    }//GEN-LAST:event_canvas_picMouseDragged

    private void canvas_picMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvas_picMousePressed
        Rectangle imageBounds = canvas_pic.getImageBounds();
    
        if(imageBounds != null && canvas_pic.getImageBounds().contains(evt.getPoint())){
            mouseLocationInImage = new Point(this.canvas_pic.getImageX() - evt.getX(), 
                    this.canvas_pic.getImageY() - evt.getY());
        }
    }//GEN-LAST:event_canvas_picMousePressed

    private void canvas_picMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvas_picMouseReleased
        mouseLocationInImage = null;
    }//GEN-LAST:event_canvas_picMouseReleased

    private void canvas_picMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvas_picMouseMoved
        Rectangle imageBounds = canvas_pic.getImageBounds();
        
        if(imageBounds != null && imageBounds.contains(evt.getPoint())){
            canvas_pic.setCursor(new Cursor(Cursor.MOVE_CURSOR));
        } else {
            canvas_pic.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_canvas_picMouseMoved

    private void slider_imageBrightnessStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slider_imageBrightnessStateChanged

        processAndSetImage(originalImage);
        
        this.slider_imageBrightness.setToolTipText(this.slider_imageBrightness.getValue() + "%");
    }//GEN-LAST:event_slider_imageBrightnessStateChanged

    private void slider_imageScaleStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slider_imageScaleStateChanged
        this.canvas_pic.setImageScale(slider_imageScale.getValue());
        this.canvas_pic.centerImage();
        
        this.chk_centerH.setSelected(true);
        this.chk_centerH.setEnabled(false);
        
        this.chk_centerV.setSelected(true);
        this.chk_centerV.setEnabled(false);
        
        this.displayImageLocation();
        
        this.slider_imageScale.setToolTipText(this.slider_imageScale.getValue() + "%");
    }//GEN-LAST:event_slider_imageScaleStateChanged

    private void chk_centerHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chk_centerHActionPerformed
        if(this.chk_centerH.isSelected()) {
            this.canvas_pic.centerImageHorizontally();
            this.chk_centerH.setEnabled(false);
            
            this.displayImageLocation();
        }
    }//GEN-LAST:event_chk_centerHActionPerformed

    private void chk_centerVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chk_centerVActionPerformed
        if(this.chk_centerV.isSelected()) {
            this.canvas_pic.centerImageVertically();
            this.chk_centerV.setEnabled(false);
            
            this.displayImageLocation();
        }
    }//GEN-LAST:event_chk_centerVActionPerformed

    private void chk_invertBinarizationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chk_invertBinarizationActionPerformed
        processAndSetImage(originalImage);
    }//GEN-LAST:event_chk_invertBinarizationActionPerformed

    private void radio_darkBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_darkBackActionPerformed
        this.canvas_pic.setDarkBackground(true);
    }//GEN-LAST:event_radio_darkBackActionPerformed

    private void radio_lightBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_lightBackActionPerformed
        this.canvas_pic.setDarkBackground(false);
    }//GEN-LAST:event_radio_lightBackActionPerformed

    private void panel_imageColorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel_imageColorMouseClicked
        Color selectedColor = JColorChooser.showDialog(null, "Select the image color", panel_imageColor.getBackground());
        if (selectedColor != null) {
            imageColor = selectedColor;
            panel_imageColor.setBackground(selectedColor);
            processAndSetImage(originalImage);
        }
    }//GEN-LAST:event_panel_imageColorMouseClicked

    private void spin_imageXStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spin_imageXStateChanged
        if(listenToPositionChanges)
            this.setImageXLocation((int) this.spin_imageX.getValue());
    }//GEN-LAST:event_spin_imageXStateChanged

    private void spin_imageYStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spin_imageYStateChanged
        if(listenToPositionChanges)
            this.setImageYLocation((int) this.spin_imageY.getValue());
    }//GEN-LAST:event_spin_imageYStateChanged

    private void spin_imageRightStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spin_imageRightStateChanged
        if(listenToPositionChanges)
            this.setImageXLocation((int) this.spin_imageRight.getValue() - this.canvas_pic.getImageWidth());
    }//GEN-LAST:event_spin_imageRightStateChanged

    private void spin_imageBottomStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spin_imageBottomStateChanged
        if(listenToPositionChanges)
            this.setImageYLocation((int) this.spin_imageBottom.getValue() - this.canvas_pic.getImageHeight());
    }//GEN-LAST:event_spin_imageBottomStateChanged

    private void processAndSetImage(BufferedImage image) {
        if(image != null) {
            final Color chromaKey = this.imageColor.equals(Color.WHITE)? Color.BLACK : Color.WHITE;
            
            final BufferedImage binaryImage = ImageUtils.getBinary(image, slider_imageBrightness.getValue(), 
                    chromaKey, this.imageColor, chk_invertBinarization.isSelected());
            
            final BufferedImage transparentImage = ImageUtils.clearColor(binaryImage, chromaKey);
            
            this.canvas_pic.setDisplayImage(transparentImage);
            this.displayImageLocation();
        }
    }
    
    private void setImageXLocation(int newX) {
        if(this.canvas_pic.getDisplayImage() != null) {
            final Rectangle imageBounds = this.canvas_pic.getImageBounds();
        
            if(imageBounds.x != newX) {
                final int minX = imageBounds.width > this.canvas_pic.getWidth()? this.canvas_pic.getWidth() - imageBounds.width : 0;
                final int maxX = imageBounds.width < this.canvas_pic.getWidth()? 
                        this.canvas_pic.getWidth() - imageBounds.width : 0;

                if(newX < minX) {
                    newX = minX;
                } else if(newX > maxX){
                    newX = maxX;
                }

                this.canvas_pic.setImageXCoordinate(newX);
                
                this.listenToPositionChanges = false;
                this.spin_imageX.setValue(newX);
                this.spin_imageRight.setValue(this.canvas_pic.getImageRight());
                this.listenToPositionChanges = true;
                
                if(newX + Math.round(imageBounds.width / 2f) 
                        == Math.round(this.canvas_pic.getWidth() / 2f)) {
                    this.chk_centerH.setSelected(true);
                    this.chk_centerH.setEnabled(false);
                } else {
                    this.chk_centerH.setSelected(false);
                    this.chk_centerH.setEnabled(true);
                }
            }
        }
    }
    
    private void setImageYLocation(int newY) {
        if(this.canvas_pic.getDisplayImage() != null) {
            final Rectangle imageBounds = this.canvas_pic.getImageBounds();
            
            if(imageBounds.y != newY) {
                final int minY = imageBounds.height > this.canvas_pic.getHeight()? this.canvas_pic.getHeight() - imageBounds.height : 0;
                final int maxY = imageBounds.height < this.canvas_pic.getHeight()? 
                        this.canvas_pic.getHeight() - imageBounds.height : 0;

                if(newY < minY) {
                    newY = minY;
                } else if(newY > maxY) {
                    newY = maxY;
                }
                
                
                this.canvas_pic.setImageYCoordinate(newY);
                
                //Updating spinners UI
                this.listenToPositionChanges = false;
                this.spin_imageY.setValue(newY);
                this.spin_imageBottom.setValue(this.canvas_pic.getImageBottom());
                this.listenToPositionChanges = true;
                
                if(newY + Math.round(imageBounds.height / 2f) 
                        == Math.round(this.canvas_pic.getHeight() / 2f)) {
                    this.chk_centerV.setSelected(true);
                    this.chk_centerV.setEnabled(false);
                } else {
                    this.chk_centerV.setSelected(false);
                    this.chk_centerV.setEnabled(true);
                }
            }
        }
    }
    
    private void displayImageLocation() {
        this.listenToPositionChanges = false;
        
        this.spin_imageX.setValue(this.canvas_pic.getImageX());
        this.spin_imageY.setValue(this.canvas_pic.getImageY());
        this.spin_imageRight.setValue(this.canvas_pic.getImageRight());
        this.spin_imageBottom.setValue(this.canvas_pic.getImageBottom());
        
        this.listenToPositionChanges = true;
    }
    
    private int[] getImageAsPixelArray() {
        if(this.originalImage != null) {
            //TODO: Check if it is memory-efficient to initialize the arraylist this way
            final ArrayList<Integer> pixelArrayList = 
                    new ArrayList(originalImage.getWidth() + originalImage.getHeight() / 2);
            
            BufferedImage transformedImage = 
                    ImageUtils.getScaledImage(this.canvas_pic.getDisplayImage(), this.canvas_pic.getImageScale() / 100f);
            //System.out.println("Image size: " + transformedImage.getWidth() + ", " + transformedImage.getHeight());
            
            for(int y = 0; y < transformedImage.getHeight(); y++) {
                for(int x = 0; x < transformedImage.getWidth(); x++) {
                    
                    int currentPixel = transformedImage.getRGB(x,y);
                    //If current pixel is not transparent
                    if( (currentPixel>>24) != 0x00 ) {
                        pixelArrayList.add(this.canvas_pic.getImageX() + x);
                        pixelArrayList.add(this.canvas_pic.getImageY() + y);
                    }
                }
            }
            
            pixelArrayList.trimToSize();
            
            final int[] pixelArray = new int[pixelArrayList.size()];
            //System.out.println("Array size: " + pixelArray.length);
            
            for(int i = 0; i < pixelArray.length; i++) {
                pixelArray[i] = pixelArrayList.get(i);
            }
            
            pixelArrayList.clear();
            
            return pixelArray;
        }
        
        return null;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            /*for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }*/
            
            UIManager.setLookAndFeel( UIManager.getSystemLookAndFeelClassName());
            
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Vista().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btnGroup_backColor;
    private easypolly.ImageCanvas canvas_pic;
    private javax.swing.JCheckBox chk_centerH;
    private javax.swing.JCheckBox chk_centerV;
    private javax.swing.JCheckBox chk_invertBinarization;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel panel_imageColor;
    private javax.swing.JPanel panel_imageProperties;
    private rsbuttom.RSButtonMetro rSButtonMetro1;
    private rsbuttom.RSButtonMetro rSButtonMetro2;
    private rsbuttom.RSButtonMetro rSButtonMetro3;
    private javax.swing.JRadioButton radio_darkBack;
    private javax.swing.JRadioButton radio_lightBack;
    private javax.swing.JSlider slider_imageBrightness;
    private javax.swing.JSlider slider_imageScale;
    private javax.swing.JSpinner spin_imageBottom;
    private javax.swing.JSpinner spin_imageRight;
    private javax.swing.JSpinner spin_imageX;
    private javax.swing.JSpinner spin_imageY;
    // End of variables declaration//GEN-END:variables
}
